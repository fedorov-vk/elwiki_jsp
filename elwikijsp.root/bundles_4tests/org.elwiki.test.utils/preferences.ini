eclipse.preferences.version=1

elwiki.translatorReader.useOutlinkImage = false

#
#  You can use this to override the default application name.  It affects
#  the HTML titles and logging, for example.  It can be different from
#  the actual web name (http://my.com/mywiki) of the application, but usually
#  it is the same.
#
jspwiki.applicationName = JSPWiki

#
#  Describe where your wiki lives (the real URL through which it is available
#  through the internet/intranet).  This is a mandatory attribute.
#
#  Be careful if you use a localhost address (http://localhost/ or http://127.0.0.1/),
#  as this will cause some unwanted side effects if your wiki is accessed from
#  any other computer than where the wiki is running.
#
#  Example:
#  jspwiki.baseURL = http://jspwiki.apache.org/
#
## WORKAROUND.
jspwiki.baseURL = /?servicehandler=org.elwiki.core.serviceHandler01

#
# For ElWiki
#
#elwiki.workDir = /home/vfedorov/dev/dev_wiki/WikiRoot/ElWiki_WorkDir
# #elwiki.workDir = /home/vfedorov/dev/dev_wiki/GIT/ELwiki_e4_2019/elwiki.root/tests/org.elwiki.test.acl/target/workdir
# #elwiki.attachmentDir = /home/vfedorov/dev/dev_wiki/WikiRoot/pages_attachment

#
#  ATTACHMENTS:
#
#  Use the following property to define which attachment provider
#  you want to use.  You have basically two choices:
#    * Set the value to BasicAttachmentProvider
#      a simple, flat file versioning provider
#    * Leave the value empty (or just comment the line out)
#      the attachment functionality is disabled
# Deprecated (:FVK:)
jspwiki.attachmentProvider = BasicAttachmentProvider

##
jspwiki.storeUserName = true

## RenderingManager

# default renderer -- XHTMLRenderer
jspwiki.renderingManager.renderer=

#
#  Set to true, if you want to cache page data into memory.  This is
#  in general a good idea.
#
#  Default is false (no cache).
#
#  NB: This replaces the JSPWiki 1.x "CachingProvider" setting, since it
#      probably was too confusing.
#
jspwiki.usePageCache = false

#
#  Which page provider class to use.  Possibilities are:
#
#    FileSystemProvider     - for simple pure file storage with no version information
#    VersioningFileProvider - for simple pure file storage with    version information
#
#jspwiki.pageProvider = org.elwiki.pageprovider.FileSystemProvider
#jspwiki.pageProvider = org.elwiki.pageprovider.ResourceXmiProvider
jspwiki.pageProvider = org.elwiki.pageprovider.CdoWikiPageProvider

#
#  Determines where wiki files are kept for FileSystemProvider i.e.:
#
#  jspwiki.fileSystemProvider.pageDir = /p/web/www-data/jspwiki/
#
#  If you're using Windows, then you must duplicate the backslashes.
#  For example, use:
#
#  jspwiki.fileSystemProvider.pageDir = C:\\Data\\jspwiki
#
#  If not provided, will default to a "jspwiki-files" directory
#  in the user's home folder.
#
jspwiki.fileSystemProvider.pageDir = /home/vfedorov/dev/dev_wiki/Temp/pages


#
#  Determines which character encoding JSPWiki should use.  If you want
#  to support all languages in your Wiki, you probably want to enable
#  this.  From JSPWiki 2.2, it is strongly suggested that you use UTF-8.
#
#  Note that you can't switch these in the mean time, since the way the
#  files are encoded on disk is incompatible between ISO-Latin1 and UTF-8.
#  Don't try.  You'll get all sorts of interesting problems, if you do.
#
#  Possible values are 'ISO-8859-1' (default, if none has been specified)
#  and 'UTF-8'.

jspwiki.encoding = UTF-8

#
# The following 3 properties apply sensible constraints around custom page
# properties that can be saved into the AbstractFileProvider. These default
# values were chosen with future JDBC providers in mind.
# See: https://issues.apache.org/jira/browse/JSPWIKI-856
#
custom.pageproperty.max.allowed=200
custom.pageproperty.key.length=255
custom.pageproperty.value.length=4096

############################################################################
#
#  Usability niceties.
#
#
#  If this property is set to "true", then page titles are rendered
#  using an extra space between every capital letter.  It may make
#  page titles readable on some occasions, but it does have the
#  drawback of making the titles look a bit funny at times.
#
jspwiki.breakTitleWithSpaces = false

#
#  If set to true, this property means that "WikiName" and "WikiNames"
#  are considered equal when linking between them.  Setting this to
#  true does not prevent you from having both kinds of pages - we just
#  fall back to the other one if the primary name does not exist.
#
#  For any other language, you'll probably want to turn this off.
# deprecated (:FVK:)
jspwiki.translatorReader.matchEnglishPlurals = true

#
#  If you set this to true, the Wiki translator will then also consider
#  "traditional" WikiNames (that is, names of pages JustSmashedTogether
#  without square brackets) as hyperlinks.  This technique is also
#  known as "CamelCase", or "BumpyCase", or "InterCapping".  I personally
#  like CamelCase as a word, which is why this property is named as it is :-).
#
#  By default this is false, since traditional WikiLinks may confuse newbies.
#
#  This option can be overridden on a per-page basis using the SET directive.
#
#deprecated (:FVK:)
jspwiki.translatorReader.camelCaseLinks = false

#
#  This sets the default template used by the Wiki engine.  The templates
#  live in templates/<template name>.  JSPWiki will attempt to find three
#  basic templates from that directory: "ViewTemplate," "EditTemplate"
#  and "AdminTemplate"
#
#  By default this is called "default".
#
#  This option can be overridden on a per-page basis using the SET directive.
#
jspwiki.templateDir = default

#
#  The name of the front page.  This is the page that gets loaded if no
#  other page is loaded.  Up until JSPWiki 1.9.28, it was always called
#  "Main", but now you can easily change the default front page here.  If not
#  defined, uses "Main".
#
jspwiki.frontPage = Main

#
#  Set this to the number of minutes a person can "lock" a page
#  for while he is editing it.
#
jspwiki.lockExpiryTime = 60

#
#  Search provider used for searching pages and attachments.
#  Default is LuceneSearchProvider, but you can fall back to BasicSearchProvider
#
jspwiki.searchProvider = org.elwiki.searchprovider.lucene

#
#  If your wiki's language is something else than English, you might
#  want to visit lucene.apache.org and download a proper Analyzer
#  for your language.  Default is to use StandardAnalyzer.
#
jspwiki.lucene.analyzer = org.apache.lucene.analysis.standard.ClassicAnalyzer
#jspwiki.lucene.analyzer = org.apache.lucene.analysis.standard.StandardAnalyzer



###############################################################################
## Wiki run-time parameters.

# Enabling page filter (before/after HTML conversion)
jspwiki.runFilters = false


###############################################################################
## Wiki CDO data storage parameters.
storage.cdo.host = localhost
storage.cdo.port = 2037
storage.cdo.repository = inventory


#############################################################################
#
#  Security, authentication and authorization
#

#  JSPWiki supports a plugin-based interface for talking to different
#  kinds of authentication and authorization systems. By "authentication,"
#  we mean a system for logging in a user to establish their identity.
#  By "authorization," we mean a system for figuring out what actions
#  users can perform based on their authenticated identities.
#
#  For users looking to get started quickly, the default settings below
#  should work fine. In addition to the properties below, you may also
#  want to modify the security policy file WEB-INF/jspwiki.policy. See
#  the policy file for more details.
#
#  AUTHENTICATION
#
#  For authentication, JSPWiki uses JAAS (Java Authentication and Authorization
#  Service) in combination with a servlet filter that picks up any credentials
#  set by the servlet container. The Authentication system is configured below.
#
#  You must choose either (A) Container or (B) Custom authentication. (B) is the default.
#
#  A) CONTAINER AUTHENTICATION
#  JSPWiki will always (passively) collect credentials supplied by your servlet
#  container, via HttpServletRequest.getUserPrincipal/getRemote user. You do not
#  need to do anything to enable this. In addition, you can cause JSPWiki users
#  to log in to the web container by uncommenting the the <security-constraint>
#  elements in WEB-INF/web.xml.
#
#  B) CUSTOM AUTHENTICATION
#  If you do not wish to use container-managed authentication, you can use JSPWiki's
#  own custom authentication system. This uses a JAAS LoginModule (supplied below)
#  to log in the user. You can use any JAAS LoginModule you want.
#  The default class is org.apache.wiki.auth.login.UserDatabaseLoginModule,
#  which compares the supplied username and hashed password with the values stored
#  in the configured UserDatabase (see USER DATABASE below).
#
#  Supply the JAAS LoginModule class used for custom authentication here.
#  The implementation MUST have a zero-argument constructor (as noted in the
#  javax.security.auth.spi.LoginModule Javadocs).
jspwiki.loginModule.class = org.elwiki.authorize.login.UserDatabaseLoginModule
#                           org.apache.wiki.auth.login.UserDatabaseLoginModule

#
# JAAS LoginContext parameters used to initialize the LoginModule. Note that 'param1'
#  etc. should be replaced with the actual parameter names. The parameter names and
# values will be loaded to a Map and passed to the LoginModule as the 'options' parameter
# when its initialize() method is called. The default UserDatabaseLoginModule class does
# not need any options.
#jspwiki.loginModule.options.param1 = value1
#jspwiki.loginModule.options.param2 = value2

#
# Login Throttling - Whether logins should be throttled to limit bruce-force attempts.
#
jspwiki.login.throttling=true

#
#  Cookie authentication & assertion
#
#  If this value is set to "true", then JSPWiki will allow you to "assert" an
#  identity using a cookie.  It's still considered to be unsafe, just like no
#  login at all, but it is useful when you have no need to force everyone to login.
#
#  By default, this is on.
#
jspwiki.cookieAssertions=true

#
#  If you would like to keep your users logged in for weeks at a time, you can
#  turn on "cookie authentication" feature.  However, this comes with important
#  security caveats:
#  1) User will stay logged in into your system for weeks.  This means that if
#     someone manages to nab the cookie during this time, they can pretend to
#     be that user.
#  2) The mappings between cookies and users are written in your filesystem,
#     in $elwiki.workDir/logincookies.  Access to this directory means that
#     the ability to fake anyone in the wiki, so please make sure that only
#     the proper admin has read access to this directory.
#
#  By default, cookie authentication is off.
#
jspwiki.cookieAuthentication=false

#
#  Defines how many days the cookies are kept, and how often the people have to log in.
#  The default is two weeks, i.e. 14 days.  If you need a shorter period than one day,
#  turn off cookie authentication, then tweak your web.xml to allow for longer sessions.
#
#jspwiki.cookieAuthentication.expiry=14

#
#
#  AUTHORIZATION
#
#  For authorization, JSPWiki has a two-tier system. When we want to
#  determine whether a user has permission to perform a certain action,
#  we first consult (A) an external "authorizer" to determine if the user
#  is a member of the required role. In addition to checking its external
#  authorizer, it also checks (B) its GroupManager for wiki-managed groups.
#
#  A) EXTERNAL AUTHORIZATION
#  By default, JSPWiki uses the servlet container's authorization service
#  for to check what roles the user belongs to (that is, it calls
#  HttpServletRequest.isUserInRole(String)). After the user authenticates,
#  the default Authorizer (WebContainerAuthorizer) checks to see if the user
#  belongs to the roles listed in web.xml using <security-role>/<role-name> or
#  <auth-constraint>/<role-name> elements. However, you can use another
#  Authorizer if you wish; specify that class here.
#JSPwiki version (deprecated :FVK:):
#jspwiki.authorizer = org.apache.wiki.auth.authorize.WebContainerAuthorizer
jspwiki.authorizer = WebContainerAuthorizer

#  B) GROUPS
#  As an additional source of authorization, users can belong to discretionary
#  "wiki groups" that the users manage themselves. Wiki groups are stored in a
#  GroupDatabase. The default group database uses an XML file for persistent
#  storage. Override with your own GroupDatabase implementation with this property:
#jspwiki.groupdatabase = org.apache.wiki.auth.authorize.XMLGroupDatabase
# WORKAROUND?
jspwiki.groupdatabase = org.elwiki.authorize.XMLGroupDatabase

#  The default group database implementation stores member lists
#  in an XML file. The location of this file should be in a secure directory
#  in the filesystem; for example, in /etc or your servlet container's
#  configuration directory If you do not supply a value for this property,
#  a blank group database will be initialized in the WEB-INF/ directory of the
#  deployed webapp. Since these directories are often overwritten when webapps
#  are undeployed or redeployed, you should probably set this property to
#  something useful as soon as you can. But for test wikis, it's probably
#  ok to leave this un-set, as long as users know that their groups could
#  "disappear" if the wiki app is ever redeployed.

#jspwiki.xmlGroupDatabaseFile = /etc/tomcat/groupdatabase.xml

## :FVK: deprecated.
#  USER DATABASE
#  User's wiki profiles are stored in a UserDatabase. The default user database
#  uses an XML file for persistent storage.
#  Override with your own UserDatabase implementation with this property:
#jspwiki.userdatabase = org.apache.wiki.auth.user.XMLUserDatabase
#org.elwiki.auth/node.userManager/userdatabase = XMLUserDatabase
# :FVK: deprecated.
#org.elwiki.configuration/jspwiki.userdatabase = XMLUserDatabase
org.elwiki.authorize/node.userManager/userdatabase = UserAdminDatabase

#  The default user database implementation stores usernames and passwords
#  in an XML file. Passwords are SHA-1 hashed. The location of this file
#  should be in a secure directory in the filesystem; for example, in
#  /etc or your servlet container's configuration directory.
#  If you do not supply a value for this property, a blank user database
#  will be initialized in the WEB-INF/ directory of the deployed webapp.
#  Since these directories are often overwritten when webapps are
#  undeployed or redeployed, you should probably set this property to
#  something useful as soon as you can. But for test wikis, it's probably
#  ok to leave this un-set, as long as users know that their profiles could
#  "disappear" if the wiki app is ever redeployed.

#jspwiki.xmlUserDatabaseFile = /etc/tomcat/userdatabase.xml

# You can also use a JDBC database for storing user profiles,
# to be configured below in the JDBC section. See the online
# AuthenticationAndAuthorization2.3 docs and the JavaDoc for
# the JDBCUserDatabase class for details on how to configure it.
#

#jspwiki.userdatabase = org.apache.wiki.auth.user.JDBCUserDatabase

#  If your JSPWiki user database shares login information with your
#  web container's authentication realm, you can configure JSPWiki to
#  add container users. At present, this only works with JDBCUserDatabase,
#  and only if you've configured your web container to use a database
#  with compatible columns and tables. If you don't know what this means,
#  then leave this property set to FALSE (the default).

#jspwiki.userdatabase.isSharedWithContainer = false

#  ACCESS CONTROL LISTS
#  Last but not least, JSPWiki needs a way of reading and persisting page
#  access control lists. The default implementation reads these from the page
#  markup. For example: "[{ALLOW edit Charlie}]". If using a custom
#  ACL manager, specify the AclManager implementation class here:

jspwiki.aclManager = org.apache.wiki.auth.acl.DefaultAclManager


#############################################################################
#
# InterWiki links
#
# The %s is replaced with the page reference (specify
# multiple times to get multiple references).  Page references should
# appear in format : [wiki:wikipage].
#

#  Google, the ubiquitous search engine.
node.interWikiRefs/Google = http://www.google.com/search?q=%s

#  This is JSPWiki site.
node.interWikiRefs/JSPWiki = http://jspwiki-wiki.apache.org/Wiki.jsp?page=%s

#  MeatballWiki, which seems to be quite popular.
node.interWikiRefs/MeatballWiki = http://usemod.com/cgi-bin/mb.pl?%s

#  TWiki, a very nice WikiClone.
node.interWikiRefs/TWiki = http://twiki.org/cgi-bin/view/TWiki/%s

#  Wikipedia, a Wiki encyclopedia!
node.interWikiRefs/Wikipedia = http://www.wikipedia.com/wiki/%s

#  This is the original WikiWikiWeb
node.interWikiRefs/WikiWikiWeb = http://c2.com/cgi/wiki?%s

node.interWikiRefs/keys=Google:JSPWiki:MeatballWiki:TWiki:Wikipedia:WikiWikiWeb:

## Inlined Image Types
############################################################################
#
# Define which image types are inlined.
# These are your standard glob expressions (just like in your
# Windows or UNIX shells).  Default pattern is to include all PNG
# images.  If you specify something here, you will override the default.
#
# For example:
#   Inline all JPG files, PNG files and all files from images.com:
#
# node.translatorReader.inlinePatterns = *.jpg,*.png,http://images.com/*

node.translatorReader.inlinePatterns = *.jpg,*.png,*.gif

###########################################################################
#
#  JavaMail configuration. If you wish to allow your users to recover
#  their passwords via email, you should configure these properties.
#  JavaMail can use either a container-managed JNDI resource factory
#  (recommended, and the default), or a stand-alone factory whose properties
#  are configured with mail.* properties in this file (below).
#

#  A. Configure the address from which the email appears to come.
#     If you're going to use a mail session obtained via JNDI, this setting
#     will only be used if it hasn't already been configured in the obtained
#     session itself. If you comment it out, JSPWiki will use its internal
#     default value.
#     If you're going to use a stand-alone mail session, you will surely want
#     to configure it, otherwise the internal default value will be used.
#
mail.from = JSPWiki <JSPWiki@localhost>

#  B. JNDI Resource Factory Configuration. JSPWiki will try this first.
#     You will need to configure your container to provide a JavaMail
#     resource factory. See your container documentation, or check our
#     fairly complete documentation (with examples for Tomcat) in
#     the JavaDocs for org.apache.wiki.util.MailUtil.
#
#  JNDI resource name. The commented-out value is the default.
#jspwiki.mail.jndiname = mail/Session

#  C. Stand-alone Resource Factory. JSPWiki will use these values if JNDI fails.
#
#  Your SMTP host (i.e. the one which sends email)
mail.smtp.host = 127.0.0.1

# If for some reason the standard smtp port (25) is blocked, you can change it here
mail.smtp.port = 25

# Set what the user sees in the "from" line of the email
#mail.from = JSPWiki <JSPWiki@localhost>

# If you are using a webserver that is publicly accessible it usually
# doesn't allow you to send mail anonymously
# (because then this mailserver would become an open relay).
# Therefore you can indicate your account information here...
#
#mail.smtp.account =  your.email@email.com
#mail.smtp.password = yourEmailPassword

# The properties below control connection timeouts and TLS (encryption)
# if the mailserver supports it. The commented-out values are the defaults.
mail.smtp.timeout = 5000
mail.smtp.connectiontimeout = 5000
mail.smtp.starttls.enable = true

###########################################################################
#
#  Configure logs.  See log4j documentation for more information
#  on how you can configure the logs.
#
#  By default we load the log4j config statements from this file (see below), unless
#  the property jspwiki.use.external.logconfig=true, in that case we let log4j figure out the
#  logging configuration to use.
#
jspwiki.use.external.logconfig = false
#  Log4j is available at http://log4j.apache.org
#
#  WARNING WARNING WILL ROBINSON: If you turn on DEBUG logging, be aware
#  that some security-sensitive information will be logged (such as session IDs).
#  Please be careful.
#
#  Send mail to root on all problems containing warnings.
#
#log4j.appender.mail = org.apache.log4j.net.SMTPAppender
#log4j.appender.mail.Threshold = WARN
#log4j.appender.mail.To = root@localhost
#log4j.appender.mail.From = JSPWiki@localhost
#log4j.appender.mail.Subject = Problem with JSPWiki!
#log4j.appender.mail.SMTPHost = mail
#log4j.appender.mail.layout = org.apache.log4j.PatternLayout
#log4j.appender.mail.layout.ConversionPattern =%d [%t] %p %c %x - %m%n

###########################################################################
#
# Workflow configuration
#
# The following properties map specific workflow steps to their associated approvers
# The name of the workflow or decision is the part of the key after "jspwiki.approver.".
# This is a logical name JSPWiki uses to determine which Principal to consult for approval.
# The Principal is identified up by AuthorizationManager at runtime; it looks for a Principal
# match as follows: GroupPrincipals; Roles; WikiPrincipals/other principals. Thus, if a value
# of "Admin" is supplied JSPWiki will first check the GroupManager to see if group Admin exits;
# then the container roles, if any; then, user Principals. If the value is blank or the
# property is commented out, it means that the workflow does not require approval.
#
# EXAMPLE:
# Uncomment the next line to require the Admin group (or Admin user, if a group is not found)
# to approve wiki pages after saving.
#jspwiki.approver.workflow/saveWikiPage=Admin

# Uncomment the next line to require the Admin group to approve new user profiles
#jspwiki.approver.workflow/createUserProfile=Admin
