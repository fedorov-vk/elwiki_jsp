package org.elwiki.api;

import java.security.Principal;
import java.util.Map;
import java.util.Properties;

import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;
import javax.servlet.http.HttpServletRequest;

import org.eclipse.rap.rwt.service.UISession;
import org.elwiki.api.event.WikiEventListener;
import org.elwiki.api.event.WikiEventProvider;
import org.elwiki.api.exceptions.WikiException;
import org.elwiki.api.exceptions.WikiSecurityException;
import org.elwiki.data.authorize.GroupPrincipal;
import org.elwiki.data.authorize.Role;

/**
 * Менеджер аутентификации.
 * 
 * @author vfedorov
 */
public interface IAuthenticationManager extends IElwikiManager, WikiEventListener, WikiEventProvider {

	/**
	 * Determines whether the supplied Principal is a "role principal".
	 * 
	 * @param principal
	 *            the principal to test
	 * @return <code>true</code> if the Principal is of type {@link GroupPrincipal} or
	 *         {@link org.elwiki.data.authorize.Role},
	 *         <code>false</code> otherwise
	 */
	public static boolean isRolePrincipal(Principal principal) {
		return principal instanceof Role || principal instanceof GroupPrincipal;
	}

	/**
	 * Determines whether the supplied Principal is a "user principal".
	 * 
	 * @param principal
	 *            the principal to test
	 * @return <code>false</code> if the Principal is of type {@link GroupPrincipal} or
	 *         {@link org.elwiki.data.authorize.Role},
	 *         <code>true</code> otherwise
	 */
	public static boolean isUserPrincipal(Principal principal) {
		return !isRolePrincipal(principal);
	}

	/**
	 * Returns true if this WikiEngine uses container-managed authentication. This method is used
	 * primarily for cosmetic purposes in the JSP tier, and performs no meaningful security function per
	 * se. Delegates to
	 * {@link org.elwiki.authorize.WebContainerAuthorizer#isContainerAuthorized()}, if used as the
	 * external authorizer; otherwise, returns <code>false</code>.
	 * 
	 * @return <code>true</code> if the wiki's authentication is managed by the container,
	 *         <code>false</code> otherwise
	 */
	boolean isContainerAuthenticated();

	/**
	 * <p>
	 * Logs in the user by attempting to populate a ElWikiSession Subject from a web servlet request by
	 * examining the request for the presence of container credentials and user cookies. The processing
	 * logic is as follows:
	 * </p>
	 * <ul type="circle">
	 * <li>If the ElWikiSession had previously been unauthenticated, check to see if user has
	 * subsequently authenticated. To be considered "authenticated", the request must supply one of the
	 * following (in order of preference): the container <code>userPrincipal</code>, container
	 * <code>remoteUser</code>, or authentication cookie. If the user is authenticated, this method
	 * fires event {@link org.elwiki.api.event.WikiSecurityEvent#LOGIN_AUTHENTICATED} with
	 * two parameters: a Principal representing the login principal, and the current ElWikiSession. In
	 * addition, if the authorizer is of type WebContainerAuthorizer, this method iterates through the
	 * container roles returned by {@link org.elwiki.auth.authorize.WebContainerAuthorizer#getRoles()},
	 * tests for membership in each one, and adds those that pass to the Subject's principal set.</li>
	 * <li>If, after checking for authentication, the ElWikiSession is still Anonymous, this method next
	 * checks to see if the user has "asserted" an identity by supplying an assertion cookie. If the
	 * user is found to be asserted, this method fires event
	 * {@link org.elwiki.api.event.WikiSecurityEvent#LOGIN_ASSERTED} with two parameters:
	 * <code>WikiPrincipal(<em>cookievalue</em>)</code>, and the current ElWikiSession.</li>
	 * <li>If, after checking for authenticated and asserted status, the ElWikiSession is <em>still</em>
	 * anonymous, this method fires event
	 * {@link org.elwiki.api.event.WikiSecurityEvent#LOGIN_ANONYMOUS} with two parameters:
	 * <code>WikiPrincipal(<em>remoteAddress</em>)</code>, and the current WikiSession</li>
	 * </ul>
	 * 
	 * @param uiSession
	 *            servlet request for this user
	 * @return always returns <code>true</code> (because anonymous login, at least, will always succeed)
	 * @throws org.elwiki.core.api.exceptions.wiki.auth.WikiSecurityException
	 *             if the user cannot be logged in for any reason
	 */
	boolean login(UISession uiSession) throws WikiSecurityException;

	/**
	 * Attempts to perform a WikiSession login for the given username/password combination using
	 * JSPWiki's custom authentication mode. In order to log in, the JAAS LoginModule supplied by the
	 * WikiEngine property {@link #PROP_LOGIN_MODULE} will be instantiated, and its
	 * {@link javax.security.auth.spi.LoginModule#initialize(Subject, CallbackHandler, Map, Map)} method
	 * will be invoked. By default, the {@link org.elwiki.authorize.login.UserDatabaseLoginModule} class will
	 * be used. When the LoginModule's <code>initialize</code> method is invoked, an options Map
	 * populated by properties keys prefixed by {@link #PREFIX_LOGIN_MODULE_OPTIONS} will be passed as a
	 * parameter.
	 * 
	 * @param session
	 *            the current wiki session; may not be <code>null</code>.
	 * @param request
	 *            the user's HTTP request. This parameter may be <code>null</code>, but the configured
	 *            LoginModule will not have access to the HTTP request in this case.
	 * @param username
	 *            The user name. This is a login name, not a WikiName. In most cases they are the same,
	 *            but in some cases, they might not be.
	 * @param password
	 *            the password
	 * @return true, if the username/password is valid
	 * @throws org.elwiki.core.api.exceptions.wiki.auth.WikiSecurityException
	 *             if the Authorizer or UserManager cannot be obtained
	 */
	boolean login(IElWikiSession session, HttpServletRequest request, String username, String password)
			throws WikiSecurityException;

	boolean loginAsserted(IElWikiSession session, HttpServletRequest request, String username, String password)
			throws WikiSecurityException;
	
	/**
	 * Logs the user out by retrieving the WikiSession associated with the HttpServletRequest and
	 * unbinding all of the Subject's Principals, except for {@link Role#ALL}, {@link Role#ANONYMOUS}.
	 * is a cheap-and-cheerful way to do it without invoking JAAS LoginModules. The logout operation
	 * will also flush the JSESSIONID cookie from the user's browser session, if it was set.
	 * 
	 * @param uiSession
	 *            the current wiki session.
	 */
	void logout(UISession uiSession);

	/**
	 * Determines whether this WikiEngine allows users to assert identities using cookies instead of
	 * passwords. This is determined by inspecting the WikiEngine property
	 * {@link #PROP_ALLOW_COOKIE_ASSERTIONS}.
	 * 
	 * @return <code>true</code> if cookies are allowed
	 */
	boolean isAllowsCookieAssertions();

	/**
	 * Determines whether this WikiEngine allows users to authenticate using cookies instead of
	 * passwords. This is determined by inspecting the WikiEngine property
	 * {@link #PROP_ALLOW_COOKIE_AUTH}.
	 * 
	 * @return <code>true</code> if cookies are allowed for authentication
	 * @since 2.5.62
	 */
	boolean isAllowsCookieAuthentication();

}